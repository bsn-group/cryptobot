version: '3.8'

services:

  db:
    image: postgres:13.2-alpine
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  logging:
    image: datalust/seq:2021.2
    container_name: logging
    restart: unless-stopped
    environment:
      ACCEPT_EULA: Y
    volumes:
      - type: volume
        source: app-logs
        target: /data
    ports:
      - 5341:80

  dbupdate:
    image: bsngroup/trader:${trader_version}
    container_name: dbupdate
    environment:
      DbAdminConnection: "Host=db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};Pooling=true;Timeout=30;"
      Serilog__WriteTo__1__Args__ServerUrl: "http://logging:5341"
      STARTUP_DLL: Crypto.Database.Upgrade.dll
      Serilog__MinimumLevel: Debug
    working_dir: /app/Crypto.Database.Upgrade
    depends_on: 
      db:
        condition: service_healthy
      
  trader:
    image: bsngroup/trader:${trader_version}
    container_name: trader
    restart: unless-stopped
    environment:
      ConnectionStrings__PostgresConnection: "Host=db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};Pooling=true;Timeout=30;"
      Binance__FuturesKey: ${Binance__FuturesKey}
      Binance__FuturesSecret: ${Binance__FuturesSecret}
      Binance__FuturesUsdtBaseUrl: ${Binance__FuturesUsdtBaseUrl}
      Binance__FuturesCoinMBaseUrl: ${Binance__FuturesCoinMBaseUrl}
      Binance__FuturesWSSUrl: ${Binance__FuturesWSSUrl}
      Serilog__WriteTo__1__Args__ServerUrl: "http://logging:5341"
      STARTUP_DLL: Crypto.Trader.dll
      cli_args: ${trader_cli_args}
    working_dir: /app/Crypto.Trader
    depends_on: 
      db:
        condition: service_healthy
    ports:
      - 5000:5000

  analyzer:
    image: bsngroup/analyzer:${analyzer_version}
    container_name: analyzer
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      signalqueue: ${SIGNAL_QUEUE}
    depends_on: 
      db:
        condition: service_healthy
    ports:
      - 8090:8090
      
  ui:
    image: bsngroup/cryptobot-ui:${ui_version}
    container_name: ui
    restart: unless-stopped
    environment:  
      ConnectionStrings__cryptodbConnection: "Host=db;Port=5432;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB};Pooling=true;Timeout=30;"
    depends_on: 
      db:
        condition: service_healthy
    ports:
      - 5050:5000
  
  webhook:
    image: wernight/ngrok
    container_name: webhook
    restart: unless-stopped
    environment: 
      NGROK_USERNAME: ${NGROK_USERNAME}
      NGROK_PASSWORD: ${NGROK_PASSWORD}
      NGROK_AUTH: ${NGROK_AUTH}
    links:
      - analyzer:8090
    ports:
      - 4040:4040

volumes:
  db-data:
  app-logs:

    